name: Setup Salt
author: dafyddj
description: Install and set up Salt on Windows
inputs:
  salt-version:
    description: Version of Salt to install
    required: false
    default: latest
  file-client:
    description: Set `file_client` parameter
    required: false
    default: local
  custom-config:
    description: Add a custom minion config
    required: false
runs:
  using: composite
  steps:
    - name: Set `file_client`
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        echo "file_client: ${{ inputs.file-client }}" >config
    - name: Set custom config
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        if [ -n "${{ inputs.custom-config }}" ]; then
            echo -n "${{ inputs.custom-config }}" >>config
        fi
    - name: Run Salt installer
      shell: pwsh
      working-directory: ${{ runner.temp }}
      run: |
        $version = "${{ inputs.salt-version }}"
        $rcDir = $version.Contains("rc") ? "salt_rc/" : ""
        $simpleVersion = $version -replace '(\d+\.\d+)rc\d+', '$1'
        if ([version]$simpleVersion -ge [version]"3006.0") {
            $repoDir = "${rcDir}salt/py3/windows/minor/$version"
        } else {
            $repoDir = "${rcDir}windows"
        }
        Invoke-WebRequest `
          -Uri https://repo.saltproject.io/${repoDir}/Salt-Minion-${{ inputs.salt-version }}-Py3-AMD64-Setup.exe `
          -OutFile salt.exe
        # The installer returns to the command line immediately after launch
        # so we MUST `-Wait` to ensure install finishes completely
        Start-Process -Wait salt.exe -ArgumentList `
          /S,/custom-config=config
        if ([version]$simpleVersion -ge [version]"3004.0") {
            $saltPath = "C:\Program Files\Salt Project\Salt"
        } else {
            $saltPath = "C:\salt"
        }
        $saltPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        # Enable embedded quotes on next invocation of `pwsh`
        # Mainstreamed in `7.3.0`
        if ($PSVersionTable.PSVersion -lt [version]"7.3.0") {
            Enable-ExperimentalFeature PSNativeCommandArgumentPassing
        }
    - name: Test Salt installation
      shell: pwsh
      run: |
        function Test-LastExitCode {
            param ([int]$lec)
            if ($lec) {
                Write-Host ("::error title=Test Salt installation::Native process returned exit code: $lec")
                exit 1
            }
        }
        $pkgsJson = salt-call --out=json pkg.list_pkgs
        Test-LastExitCode($LASTEXITCODE)
        $pkgsJson | jq 'to_entries|map(.value|with_entries(if (.key|test("Salt Minion")) then ({key: .key, value: .value}) else empty end))'
        Test-LastExitCode($LASTEXITCODE)
